{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "0628_SLE_several_version(for users)",
      "provenance": [],
      "collapsed_sections": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "source": [
        "#使用者版2-4\n",
        "#此版精進之處:\n",
        "# 1.在問答時，titer若出現非正小數，則請使用者重填?!；condition問答時若出現非Y或N的字元，將回到loop上個問題，讓填入者在填一次(而非資料處理時請他重填) \n",
        "# 2.預先填入陽性時的分數，問答時直接判斷並產生trueweight(如陰性則改為0)，較無用到字典參照 \n",
        "# 3.試著將前置作業(dict維護)與後續資訊處理與運算分為兩部分，方便於未來診斷標準更新時，只須修改前面的dict即可。\n",
        "#    (本次盡量將後面各變數參照至一個(或少數個)來源資料，減少診斷標準改變時可能出現版本維護不易之問題)\n",
        "# 4.各執行階段間隔一行、更加格式化\n",
        "# SLE final diagnosis\n",
        "def SLE(total_score):\n",
        "  if total_score >= 10:\n",
        "    return f'''\\nDiagnostic result:\n",
        "  Yes. This patient is classified as SLE.\n",
        "  Main causes: (1)clinical: {main_clinical_cause} ； (2)immunology: {main_immunological_cause}\n",
        "  Each gets {highest} pts of total {total_score} pts and accounts for {highest/total_score * 100:.2f} % of total weights.'''\n",
        "  else:\n",
        "    return f'''\\nDiagnostic result:\n",
        "  No. This patient is not classified as SLE.\n",
        "  The total weights add up to only {total_score} pts, which doesn't reach the standard 10 pts for SLE diagnosis.'''\n",
        "#clinical domains & criteria\n",
        "Constitutional = {'Fever':2}\n",
        "Hematologic = {'Leukopenia':3, 'Thrombocytopenia':4, 'Autoimmune hemolysis':4}\n",
        "Neuropsychiatric = {'Delirium':2, 'Psychosis':3, 'Siezure':5}\n",
        "Mucocutaneous = {'Non-scarring alopecia':2, 'Oral ulcers':2, 'Subacute cutaneous OR discoid lupus':4, 'Acute cutaneous lupus':6}\n",
        "Serosal = {'Pleural or pericardial effusion':5, 'Acute pericarditis':6}\n",
        "Musculoskeletal = {'Joint involvment':6}\n",
        "Renal = {'Proteinuria > 0.5g/24h':4, 'Renal biopsy Class II or V lupus nephritis':8, 'Renal biopsy Class III or IV lupus nephritis':10}\n",
        "#Immunology domains & criteria\n",
        "Antiphospholipid_antibodies = {'Anti-cardiolipin antibodies OR Anti-β2GP1 antibodes OR Lupus anticoagulant':2}\n",
        "Complement_proteins = {'Low C3 OR low C4':3, 'Low C3 AND low C4':4}\n",
        "SLE_specific_antibodies = {'Anti-dsDNA antibody OR Anti-Smith antibody':6}\n",
        "#clinical & immunological\n",
        "clinical = ['Constitutional', 'Hematologic', 'Neuropsychiatric', 'Mucocutaneous', 'Serosal', 'Musculoskeletal', 'Renal']\n",
        "immunological = ['Antiphospholipid_antibodies', 'Complement_proteins', 'SLE_specific_antibodies']\n",
        "# clinical2 & immunological2\n",
        "clinical2 = [Constitutional, Hematologic, Neuropsychiatric, Mucocutaneous, Serosal, Musculoskeletal, Renal]\n",
        "immunological2 = [Antiphospholipid_antibodies, Complement_proteins, SLE_specific_antibodies]\n",
        "#clinical_Q\n",
        "clinical_Q = clinical2.copy()\n",
        "for i in range(0, len(clinical_Q)):\n",
        "  clinical_Q[i] = list(clinical_Q[i].keys())\n",
        "#Immunological_Q **\n",
        "immunological_Q = immunological2.copy()\n",
        "for i in range(0, len(immunological_Q)):\n",
        "  immunological_Q[i] = list(immunological_Q[i].keys())\n",
        "#clinical & immunological weight  都先填入陽性時的分數\n",
        "clinical_trueweight = clinical2.copy()\n",
        "for i in range(len(clinical_trueweight)):\n",
        "  clinical_trueweight[i] = list(clinical_trueweight[i].values())\n",
        "#immunological_weight\n",
        "immunological_trueweight = immunological2.copy()\n",
        "for i in range(len(immunological_trueweight)):\n",
        "  immunological_trueweight[i] = list(immunological_trueweight[i].values())\n",
        "  \n",
        "#entry criterion\n",
        "print('Welcome to SLE diagnosis assistant!')\n",
        "print('Here comes entry criteron.\\n')\n",
        "titer = None\n",
        "while type(titer) != type(6.6) or titer <= 0:\n",
        "  try:\n",
        "    titer = float(input('ANA at a titer of 1:\"?\" on HEp-2 cells.(Please input a number of type\"float\".)'))\n",
        "    if titer <= 0:\n",
        "      print('You should input a positive number!')\n",
        "      continue\n",
        "  except ValueError:\n",
        "    print('You got a ValueError.')  \n",
        "  except:\n",
        "    print('You got other exceptions.')\n",
        "if titer <= 80:   #記得後面要縮排>>考慮改良為while loop\n",
        "  print('\\nAdditive criteria are needed before final diagnosis.')\n",
        "  print('''The following are some important conditions in clinical or immunological domains.\n",
        "Please input \"Y\" if a patient meets the condition while input \"N\" if one doesn't.''')\n",
        "  #嘗試利用for loop處理與醫師問答和答案紀錄(含防呆裝置)\n",
        "  print(\"\\nFirst, we need to know the patient's clinical conditions through the following questionaire.\")\n",
        "  for i in range(0, len(clinical)):\n",
        "    print('\\n{0}. Questions about {1} domain:'.format(i+1, clinical[i])) #字串格式化\n",
        "    j = 0\n",
        "    while j < len(clinical_Q[i]):\n",
        "      print(clinical_Q[i][j], '?')\n",
        "      check = input( 'Please input \"Y\" or \"N\".' )\n",
        "      if check == \"Y\":\n",
        "        j = j + 1\n",
        "      elif check == \"N\":\n",
        "        clinical_trueweight[i][j] = 0\n",
        "        j = j + 1\n",
        "      else:\n",
        "        print(\"You just filled in a wrong key word(not \\\"Y\\\" or \\\"N\\\"), please be more careful and try again!\")\n",
        "        j = j   \n",
        "  \n",
        "  print(\"\\nThen, we would like to further understand the patient's immunological conditions through the following questionaire.\")\n",
        "  for i in range(0, len(immunological_Q)):\n",
        "    print(f'\\n{i+1}. Questions about {immunological[i]} domain:')\n",
        "    j = 0\n",
        "    while j < len(immunological_Q[i]):\n",
        "      print(immunological_Q[i][j], '?')\n",
        "      check = input( 'Please input \"Y\" or \"N\".' )\n",
        "      if check == \"Y\":\n",
        "        j = j + 1\n",
        "      elif check == \"N\":\n",
        "        immunological_trueweight[i][j] = 0\n",
        "        j = j + 1\n",
        "      else:\n",
        "        print(\"You just filled in a wrong key word(not \\\"Y\\\" or \\\"N\\\"), please be more careful and try again!\")\n",
        "        j = j   \n",
        " \n",
        "  #處理clinical & immunological domains的weights\n",
        "  clinical_trueweight2 = [] \n",
        "  immunological_trueweight2 = []\n",
        "  for weight_list in clinical_trueweight:\n",
        "    clinical_trueweight2.append(max(weight_list)) \n",
        "  for weight_list in immunological_trueweight:\n",
        "    immunological_trueweight2.append(max(weight_list))\n",
        "  clinical_total_score = sum(clinical_trueweight2)\n",
        "  immunological_total_score = sum(immunological_trueweight2)\n",
        "  total_score = clinical_total_score + immunological_total_score\n",
        "  # 找到weight最高的domain(想想如何呈現前三高)\n",
        "  highest_clinical = max(clinical_trueweight2)\n",
        "  highest_immunological = max(immunological_trueweight2)\n",
        "  highest = highest_clinical if highest_clinical > highest_immunological else highest_immunological\n",
        "  main_clinical_cause = []\n",
        "  main_immunological_cause = []\n",
        "  for i in range(len(clinical_trueweight2)):\n",
        "    if clinical_trueweight2[i] == highest:\n",
        "      main_clinical_cause.append(f'{clinical[i]} domain')\n",
        "  for j in range(len(immunological_trueweight2)):\n",
        "    if immunological_trueweight2[j] == highest:\n",
        "      main_immunological_cause.append(f'{immunological[j]} domain') \n",
        "  print(SLE(total_score))\n",
        "else:\n",
        "  print('\\nDiagnositc result:')\n",
        "  print('\\nThis patient is not classified as SLE!')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "38bc8652-8106-455b-e92c-3fa85e2d92d8",
        "id": "K7JgGiHcM3L0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Welcome to SLE diagnosis assistant!\n",
            "Here comes entry criteron.\n",
            "\n",
            "ANA at a titer of 1:\"?\" on HEp-2 cells.(Please input a number of type\"float\".)t\n",
            "You got a ValueError.\n",
            "ANA at a titer of 1:\"?\" on HEp-2 cells.(Please input a number of type\"float\".)你好\n",
            "You got a ValueError.\n",
            "ANA at a titer of 1:\"?\" on HEp-2 cells.(Please input a number of type\"float\".)-3\n",
            "You should input a positive number!\n",
            "ANA at a titer of 1:\"?\" on HEp-2 cells.(Please input a number of type\"float\".)50\n",
            "\n",
            "Additive criteria are needed before final diagnosis.\n",
            "The following are some important conditions in clinical or immunological domains.\n",
            "Please input \"Y\" if a patient meets the condition while input \"N\" if one doesn't.\n",
            "\n",
            "First, we need to know the patient's clinical conditions through the following questionaire.\n",
            "\n",
            "1. Questions about Constitutional domain:\n",
            "Fever ?\n",
            "Please input \"Y\" or \"N\".t\n",
            "You just filled in a wrong key word(not \"Y\" or \"N\"), please be more careful and try again!\n",
            "Fever ?\n",
            "Please input \"Y\" or \"N\".N\n",
            "\n",
            "2. Questions about Hematologic domain:\n",
            "Leukopenia ?\n",
            "Please input \"Y\" or \"N\".y\n",
            "You just filled in a wrong key word(not \"Y\" or \"N\"), please be more careful and try again!\n",
            "Leukopenia ?\n",
            "Please input \"Y\" or \"N\".Y\n",
            "Thrombocytopenia ?\n",
            "Please input \"Y\" or \"N\".Y\n",
            "Autoimmune hemolysis ?\n",
            "Please input \"Y\" or \"N\".N\n",
            "\n",
            "3. Questions about Neuropsychiatric domain:\n",
            "Delirium ?\n",
            "Please input \"Y\" or \"N\".N\n",
            "Psychosis ?\n",
            "Please input \"Y\" or \"N\".N\n",
            "Siezure ?\n",
            "Please input \"Y\" or \"N\".Y\n",
            "\n",
            "4. Questions about Mucocutaneous domain:\n",
            "Non-scarring alopecia ?\n",
            "Please input \"Y\" or \"N\".N\n",
            "Oral ulcers ?\n",
            "Please input \"Y\" or \"N\".N\n",
            "Subacute cutaneous OR discoid lupus ?\n",
            "Please input \"Y\" or \"N\".N\n",
            "Acute cutaneous lupus ?\n",
            "Please input \"Y\" or \"N\".N\n",
            "\n",
            "5. Questions about Serosal domain:\n",
            "Pleural or pericardial effusion ?\n",
            "Please input \"Y\" or \"N\".Y\n",
            "Acute pericarditis ?\n",
            "Please input \"Y\" or \"N\".N\n",
            "\n",
            "6. Questions about Musculoskeletal domain:\n",
            "Joint involvment ?\n",
            "Please input \"Y\" or \"N\".N\n",
            "\n",
            "7. Questions about Renal domain:\n",
            "Proteinuria > 0.5g/24h ?\n",
            "Please input \"Y\" or \"N\".N\n",
            "Renal biopsy Class II or V lupus nephritis ?\n",
            "Please input \"Y\" or \"N\".N\n",
            "Renal biopsy Class III or IV lupus nephritis ?\n",
            "Please input \"Y\" or \"N\".N\n",
            "\n",
            "Then, we would like to further understand the patient's immunological conditions through the following questionaire.\n",
            "\n",
            "1. Questions about Antiphospholipid_antibodies domain:\n",
            "Anti-cardiolipin antibodies OR Anti-β2GP1 antibodes OR Lupus anticoagulant ?\n",
            "Please input \"Y\" or \"N\".N\n",
            "\n",
            "2. Questions about Complement_proteins domain:\n",
            "Low C3 OR low C4 ?\n",
            "Please input \"Y\" or \"N\".Y\n",
            "Low C3 AND low C4 ?\n",
            "Please input \"Y\" or \"N\".N\n",
            "\n",
            "3. Questions about SLE_specific_antibodies domain:\n",
            "Anti-dsDNA antibody OR Anti-Smith antibody ?\n",
            "Please input \"Y\" or \"N\".N\n",
            "\n",
            "Diagnostic result:\n",
            "  Yes. This patient is classified as SLE.\n",
            "  Main causes: (1)clinical: ['Neuropsychiatric domain', 'Serosal domain'] ； (2)immunology: []\n",
            "  Each gets 5 pts of total 17 pts and accounts for 29.41 % of total weights.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#使用者版2-3\n",
        "#精進之處:\n",
        "# 1.在問答時，titer若出現非正小數，則請使用者重填；condition問答時若出現非Y或N的字元，將回到loop上個問題，讓填入者在填一次(而非資料處理時請他重填)\n",
        "# 2.更加善用dict的\"參照\"功能(注意：dict用於標籤簡單、特定關鍵字時) WAY2:問答時直接判斷、參照並產生trueweight\n",
        "# 3.試著將前置作業(dict維護)與後續資訊處理與運算分為兩部分，方便於未來診斷標準更新時，只須修改前面的dict即可。\n",
        "# SLE final diagnosis\n",
        "def SLE(total_score):\n",
        "  if total_score >= 10:\n",
        "    return f'''\\nDiagnostic result:\n",
        "  Yes. This patient is classified as SLE.\n",
        "  Main causes: (1)clinical: {main_clinical_cause} ； (2)immunology: {main_immunological_cause}\n",
        "  Each gets {highest} pts of total {total_score} pts and accounts for {highest/total_score * 100:.2f} % of total weights.'''\n",
        "  else:\n",
        "    return f'''\\nDiagnostic result:\n",
        "  No. This patient is not classified as SLE.\n",
        "  The total weights add up to only {total_score} pts, which doesn't reach the standard 10 pts for SLE diagnosis.'''\n",
        "#clinical domains & criteria\n",
        "Constitutional = {'Fever':2}\n",
        "Hematologic = {'Leukopenia':3, 'Thrombocytopenia':4, 'Autoimmune hemolysis':4}\n",
        "Neuropsychiatric = {'Delirium':2, 'Psychosis':3, 'Siezure':5}\n",
        "Mucocutaneous = {'Non-scarring alopecia':2, 'Oral ulcers':2, 'Subacute cutaneous OR discoid lupus':4, 'Acute cutaneous lupus':6}\n",
        "Serosal = {'Pleural or pericardial effusion':5, 'Acute pericarditis':6}\n",
        "Musculoskeletal = {'Joint involvment':6}\n",
        "Renal = {'Proteinuria > 0.5g/24h':4, 'Renal biopsy Class II or V lupus nephritis':8, 'Renal biopsy Class III or IV lupus nephritis':10}\n",
        "#Immunology domains & criteria\n",
        "Antiphospholipid_antibodies = {'Anti-cardiolipin antibodies OR Anti-β2GP1 antibodes OR Lupus anticoagulant':2}\n",
        "Complement_proteins = {'Low C3 OR low C4':3, 'Low C3 AND low C4':4}\n",
        "SLE_specific_antibodies = {'Anti-dsDNA antibody OR Anti-Smith antibody':6}\n",
        "#clinical & immunological\n",
        "clinical = ['Constitutional', 'Hematologic', 'Neuropsychiatric', 'Mucocutaneous', 'Serosal', 'Musculoskeletal', 'Renal']\n",
        "immunological = ['Antiphospholipid_antibodies', 'Complement_proteins', 'SLE_specific_antibodies']\n",
        "# clinical2 & immunological2\n",
        "clinical2 = [Constitutional, Hematologic, Neuropsychiatric, Mucocutaneous, Serosal, Musculoskeletal, Renal]\n",
        "immunological2 = [Antiphospholipid_antibodies, Complement_proteins, SLE_specific_antibodies]\n",
        "#clinical_Q\n",
        "clinical_Q = clinical2.copy()\n",
        "for i in range(0, len(clinical_Q)):\n",
        "  clinical_Q[i] = list(clinical_Q[i].keys())\n",
        "#Immunological_Q \n",
        "immunological_Q = immunological2.copy()\n",
        "for i in range(0, len(immunological_Q)):\n",
        "  immunological_Q[i] = list(immunological_Q[i].keys())\n",
        "#clinical & immunological weight??\n",
        "clinical_trueweight = clinical2.copy()\n",
        "for i in range(len(clinical_trueweight)):\n",
        "  clinical_trueweight[i] = list(clinical_trueweight[i].values())\n",
        "  clinical_trueweight[i][0:len(clinical_trueweight[i])] = [None] * len(clinical_trueweight[i])\n",
        "#immunological_weight\n",
        "immunological_trueweight = immunological2.copy()\n",
        "for i in range(len(immunological_trueweight)):\n",
        "  immunological_trueweight[i] = list(immunological_trueweight[i].values())\n",
        "  immunological_trueweight[i][0:len(immunological_trueweight[i])] = [None] * len(immunological_trueweight[i])\n",
        "\n",
        "#entry criterion\n",
        "print('Welcome to SLE diagnosis assistant!')\n",
        "print('Here comes entry criteron.')\n",
        "titer = None\n",
        "while type(titer) != type(6.6) or titer <= 0:\n",
        "  try:\n",
        "    titer = float(input('ANA at a titer of 1:\"?\" on HEp-2 cells.(Please input a number of type\"float\".)'))\n",
        "    if titer <= 0:\n",
        "      print('You should input a positive number!')\n",
        "      continue\n",
        "  except ValueError:\n",
        "    print('You got a ValueError.')  \n",
        "  except:\n",
        "    print('You got other exceptions.')\n",
        "if titer <= 80:   #記得後面要縮排>>考慮改良為while loop\n",
        "  print('Additive criteria are needed before final diagnosis.')\n",
        "  print('''The following are some important conditions in clinical or immunological domains.\n",
        "   Please input \"Y\" if a patient meets the condition while input \"N\" if one doesn't.''')\n",
        "  #嘗試利用for loop處理與醫師問答和答案紀錄\n",
        "  print(\"First, we need to know the patient's clinical conditions through the following questionaire.\")\n",
        "  for i in range(0, len(clinical)):\n",
        "    print('{0}. Questions about {1} domain:'.format(i+1, clinical[i])) #字串格式化\n",
        "    j = 0\n",
        "    while j < len(clinical_Q[i]):\n",
        "      print(clinical_Q[i][j], '?')\n",
        "      check = input( 'Please input \"Y\" or \"N\".' )\n",
        "      if check == \"Y\":\n",
        "        clinical_trueweight[i][j] = clinical2[i][clinical_Q[i][j]]\n",
        "        j = j + 1\n",
        "      elif check == \"N\":\n",
        "        clinical_trueweight[i][j] = 0\n",
        "        j = j + 1\n",
        "      else:\n",
        "        print(\"You just filled in a wrong key word(not \\\"Y\\\" or \\\"N\\\"), please be more careful and try again!\")\n",
        "        j = j   \n",
        "  \n",
        "  print(\"Then, we would like to further understand the patient's immunological conditions through the following questionaire.\")\n",
        "  for i in range(0, len(immunological_Q)):\n",
        "    print(f'{i+1}. Questions about {immunological[i]} domain:')\n",
        "    j = 0\n",
        "    while j < len(immunological_Q[i]):\n",
        "      print(immunological_Q[i][j], '?')\n",
        "      check = input( 'Please input \"Y\" or \"N\".' )\n",
        "      if check == \"Y\":\n",
        "        immunological_trueweight[i][j] = immunological2[i][immunological_Q[i][j]]\n",
        "        j = j + 1\n",
        "      elif check == \"N\":\n",
        "        immunological_trueweight[i][j] = 0\n",
        "        j = j + 1\n",
        "      else:\n",
        "        print(\"You just filled in a wrong key word(not \\\"Y\\\" or \\\"N\\\"), please be more careful and try again!\")\n",
        "        j = j   \n",
        " \n",
        "  #處理clinical & immunological domains的weights\n",
        "  clinical_trueweight2 = [] \n",
        "  immunological_trueweight2 = []\n",
        "  for weight_list in clinical_trueweight:\n",
        "    clinical_trueweight2.append(max(weight_list)) \n",
        "  for weight_list in immunological_trueweight:\n",
        "    immunological_trueweight2.append(max(weight_list))\n",
        "  clinical_total_score = sum(clinical_trueweight2)\n",
        "  immunological_total_score = sum(immunological_trueweight2)\n",
        "  total_score = clinical_total_score + immunological_total_score\n",
        "  # 找到weight最高的domain(想想如何呈現前三高)\n",
        "  highest_clinical = max(clinical_trueweight2)\n",
        "  highest_immunological = max(immunological_trueweight2)\n",
        "  highest = highest_clinical if highest_clinical > highest_immunological else highest_immunological\n",
        "  main_clinical_cause = []\n",
        "  main_immunological_cause = []\n",
        "  for i in range(len(clinical_trueweight2)):\n",
        "    if clinical_trueweight2[i] == highest:\n",
        "      main_clinical_cause.append(f'{clinical[i]} domain')\n",
        "  for j in range(len(immunological_trueweight2)):\n",
        "    if immunological_trueweight2[j] == highest:\n",
        "      main_immunological_cause.append(f'{immunological[j]} domain') \n",
        "  main_clinical_cause = tuple(main_clinical_cause)     \n",
        "  main_immunological_cause = tuple(main_immunological_cause)\n",
        "  print(SLE(total_score))\n",
        "else:\n",
        "  print('\\nDiagnositc result:')\n",
        "  print('This patient is not classified as SLE!')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d21701cd-766f-41e7-80b0-b99dd45d6f19",
        "id": "7GPdhUDykqNh"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Welcome to SLE diagnosis assistant!\n",
            "Here comes entry criteron.\n",
            "ANA at a titer of 1:\"?\" on HEp-2 cells.(Please input a number of type\"float\".)r\n",
            "You got a ValueError.\n",
            "ANA at a titer of 1:\"?\" on HEp-2 cells.(Please input a number of type\"float\".)0\n",
            "You should input a positive number!\n",
            "ANA at a titer of 1:\"?\" on HEp-2 cells.(Please input a number of type\"float\".)40\n",
            "Additive criteria are needed before final diagnosis.\n",
            "The following are some important conditions in clinical or immunological domains.\n",
            "   Please input \"Y\" if a patient meets the condition while input \"N\" if one doesn't.\n",
            "First, we need to know the patient's clinical conditions through the following questionaire.\n",
            "1. Questions about Constitutional domain:\n",
            "Fever ?\n",
            "Please input \"Y\" or \"N\".g\n",
            "You just filled in a wrong key word(not \"Y\" or \"N\"), please be more careful and try again!\n",
            "Fever ?\n",
            "Please input \"Y\" or \"N\".Y\n",
            "2. Questions about Hematologic domain:\n",
            "Leukopenia ?\n",
            "Please input \"Y\" or \"N\".N\n",
            "Thrombocytopenia ?\n",
            "Please input \"Y\" or \"N\".N\n",
            "Autoimmune hemolysis ?\n",
            "Please input \"Y\" or \"N\".N\n",
            "3. Questions about Neuropsychiatric domain:\n",
            "Delirium ?\n",
            "Please input \"Y\" or \"N\".Y\n",
            "Psychosis ?\n",
            "Please input \"Y\" or \"N\".N\n",
            "Siezure ?\n",
            "Please input \"Y\" or \"N\".Y\n",
            "4. Questions about Mucocutaneous domain:\n",
            "Non-scarring alopecia ?\n",
            "Please input \"Y\" or \"N\".N\n",
            "Oral ulcers ?\n",
            "Please input \"Y\" or \"N\".Y\n",
            "Subacute cutaneous OR discoid lupus ?\n",
            "Please input \"Y\" or \"N\".N\n",
            "Acute cutaneous lupus ?\n",
            "Please input \"Y\" or \"N\".N\n",
            "5. Questions about Serosal domain:\n",
            "Pleural or pericardial effusion ?\n",
            "Please input \"Y\" or \"N\".Y\n",
            "Acute pericarditis ?\n",
            "Please input \"Y\" or \"N\".Y\n",
            "6. Questions about Musculoskeletal domain:\n",
            "Joint involvment ?\n",
            "Please input \"Y\" or \"N\".N\n",
            "7. Questions about Renal domain:\n",
            "Proteinuria > 0.5g/24h ?\n",
            "Please input \"Y\" or \"N\".N\n",
            "Renal biopsy Class II or V lupus nephritis ?\n",
            "Please input \"Y\" or \"N\".N\n",
            "Renal biopsy Class III or IV lupus nephritis ?\n",
            "Please input \"Y\" or \"N\".N\n",
            "Then, we would like to further understand the patient's immunological conditions through the following questionaire.\n",
            "1. Questions about Antiphospholipid_antibodies domain:\n",
            "Anti-cardiolipin antibodies OR Anti-β2GP1 antibodes OR Lupus anticoagulant ?\n",
            "Please input \"Y\" or \"N\".Y\n",
            "2. Questions about Complement_proteins domain:\n",
            "Low C3 OR low C4 ?\n",
            "Please input \"Y\" or \"N\".Y\n",
            "Low C3 AND low C4 ?\n",
            "Please input \"Y\" or \"N\".N\n",
            "3. Questions about SLE_specific_antibodies domain:\n",
            "Anti-dsDNA antibody OR Anti-Smith antibody ?\n",
            "Please input \"Y\" or \"N\".N\n",
            "\n",
            "Diagnostic result:\n",
            "  Yes. This patient is classified as SLE.\n",
            "  Main causes: (1)clinical: ('Serosal domain',) ； (2)immunology: ()\n",
            "  Each gets 6 pts of total 20 pts and accounts for 30.00 % of total weights.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#使用者版2-2\n",
        "#此版將精進之處: \n",
        "# 1.在問答時，titer若出現非正浮點數，則請使用者重填；condition問答時若出現非Y或N的字元，將回到loop上個問題，讓填入者在填一次(而非資料處理時請他重填) \n",
        "# 2.更加善用dict的\"參照\"功能(注意：dict用於標籤簡單、特定關鍵字時) WAY1:同樣先彙整問答時的資料，再做後續的答案與分數轉換\n",
        "# 3.試著將前置作業(dict維護)與後續資訊處理與運算分為兩部分，方便於未來診斷標準更新時，只須修改前面的dict即可。\n",
        "# SLE final diagnosis\n",
        "def SLE(total_score):\n",
        "  if total_score >= 10:\n",
        "    return f'''\\nDiagnostic result:\n",
        "  Yes. This patient is classified as SLE.\n",
        "  Main causes: (1)clinical: {main_clinical_cause} ； (2)immunology: {main_immunological_cause}\n",
        "  Each gets {highest} pts of total {total_score} pts and accounts for {highest/total_score * 100:.2f} % of total weights.'''\n",
        "  else:\n",
        "    return f'''\\nDiagnostic result:\n",
        "  No. This patient is not classified as SLE.\n",
        "  The total weights add up to only {total_score} pts, which doesn't reach the standard 10 pts for SLE diagnosis.'''\n",
        "#clinical domains & criteria\n",
        "Constitutional = {'Fever':2}\n",
        "Hematologic = {'Leukopenia':3, 'Thrombocytopenia':4, 'Autoimmune hemolysis':4}\n",
        "Neuropsychiatric = {'Delirium':2, 'Psychosis':3, 'Siezure':5}\n",
        "Mucocutaneous = {'Non-scarring alopecia':2, 'Oral ulcers':2, 'Subacute cutaneous OR discoid lupus':4, 'Acute cutaneous lupus':6}\n",
        "Serosal = {'Pleural or pericardial effusion':5, 'Acute pericarditis':6}\n",
        "Musculoskeletal = {'Joint involvment':6}\n",
        "Renal = {'Proteinuria > 0.5g/24h':4, 'Renal biopsy Class II or V lupus nephritis':8, 'Renal biopsy Class III or IV lupus nephritis':10}\n",
        "#Immunology domains & criteria\n",
        "Antiphospholipid_antibodies = {'Anti-cardiolipin antibodies OR Anti-β2GP1 antibodes OR Lupus anticoagulant':2}\n",
        "Complement_proteins = {'Low C3 OR low C4':3, 'Low C3 AND low C4':4}\n",
        "SLE_specific_antibodies = {'Anti-dsDNA antibody OR Anti-Smith antibody':6}\n",
        "#clinical & immunological\n",
        "clinical = ['Constitutional', 'Hematologic', 'Neuropsychiatric', 'Mucocutaneous', 'Serosal', 'Musculoskeletal', 'Renal']\n",
        "immunological = ['Antiphospholipid_antibodies', 'Complement_proteins', 'SLE_specific_antibodies']\n",
        "# clinical2 & immunological2\n",
        "clinical2 = [Constitutional, Hematologic, Neuropsychiatric, Mucocutaneous, Serosal, Musculoskeletal, Renal]\n",
        "immunological2 = [Antiphospholipid_antibodies, Complement_proteins, SLE_specific_antibodies]\n",
        "#clinical_Q\n",
        "clinical_Q = clinical2.copy()\n",
        "for i in range(0, len(clinical_Q)):\n",
        "  clinical_Q[i] = list(clinical_Q[i].keys())\n",
        "#Immunological_Q \n",
        "immunological_Q = immunological2.copy()\n",
        "for i in range(0, len(immunological_Q)):\n",
        "  immunological_Q[i] = list(immunological_Q[i].keys())\n",
        "#clinical & immunological weight??\n",
        "clinical_trueweight = clinical2.copy()\n",
        "for i in range(len(clinical_trueweight)):\n",
        "  clinical_trueweight[i] = list(clinical_trueweight[i].values())\n",
        "  clinical_trueweight[i][0:len(clinical_trueweight[i])] = [None] * len(clinical_trueweight[i])\n",
        "#immunological_weight\n",
        "immunological_trueweight = immunological2.copy()\n",
        "for i in range(len(immunological_trueweight)):\n",
        "  immunological_trueweight[i] = list(immunological_trueweight[i].values())\n",
        "  immunological_trueweight[i][0:len(immunological_trueweight[i])] = [None] * len(immunological_trueweight[i])\n",
        "#Ans\n",
        "Ans_clinical = [[], [], [], [], [], [], []]  \n",
        "Ans_immunological = [[], [], []]\n",
        "\n",
        "#entry criterion\n",
        "print('Welcome to SLE diagnosis assistant!')\n",
        "print('Here comes entry criteron.')\n",
        "titer = None\n",
        "while type(titer) != type(6.6) or titer <= 0:\n",
        "  try:\n",
        "    titer = float(input('ANA at a titer of 1:\"?\" on HEp-2 cells.(Please input a number of type\"float\".)'))\n",
        "    if titer <= 0:\n",
        "      print('You should input a positive number!')\n",
        "      continue\n",
        "  except ValueError:\n",
        "    print('You got a ValueError.')  \n",
        "  except:\n",
        "    print('You got other exceptions.')\n",
        "if titer <= 80:   #記得後面要縮排>>考慮改良為while loop\n",
        "  print('Additive criteria are needed before final diagnosis.')\n",
        "  print('''The following are some important conditions in clinical or immunological domains.\n",
        "   Please input \"Y\" if a patient meets the condition while input \"N\" if one doesn't.''')\n",
        "  #嘗試利用for loop處理與醫師問答和答案紀錄\n",
        "  print(\"First, we need to know the patient's clinical conditions through the following questionaire.\")\n",
        "  for i in range(0, len(clinical)):\n",
        "    print('{0}. Questions about {1} domain:'.format(i+1, clinical[i])) #字串格式化\n",
        "    j = 0\n",
        "    while j < len(clinical_Q[i]):\n",
        "      print(clinical_Q[i][j], '?')\n",
        "      check = input( 'Please input \"Y\" or \"N\".' )\n",
        "      if check == \"Y\":\n",
        "        Ans_clinical[i] += check\n",
        "        j = j + 1\n",
        "      elif check == \"N\":\n",
        "        Ans_clinical[i] += check\n",
        "        j = j + 1\n",
        "      else:\n",
        "        print(\"You just filled in a wrong key word(not \\\"Y\\\" or \\\"N\\\"), please be more careful and try again!\")\n",
        "        j = j   \n",
        "  \n",
        "  print(\"Then, we would like to further understand the patient's immunological conditions through the following questionaire.\")\n",
        "  for i in range(0, len(immunological_Q)):\n",
        "    print(f'{i+1}. Questions about {immunological[i]} domain:')\n",
        "    j = 0\n",
        "    while j < len(immunological_Q[i]):\n",
        "      print(immunological_Q[i][j], '?')\n",
        "      check = input( 'Please input \"Y\" or \"N\".' )\n",
        "      if check == \"Y\":\n",
        "        Ans_immunological[i] += check\n",
        "        j = j + 1\n",
        "      elif check == \"N\":\n",
        "        Ans_immunological[i] += check\n",
        "        j = j + 1\n",
        "      else:\n",
        "        print(\"You just filled in a wrong key word(not \\\"Y\\\" or \\\"N\\\"), please be more careful and try again!\")\n",
        "        j = j   \n",
        "  \n",
        "  #處理clinical domains的weights\n",
        "  for i in range(len(Ans_clinical)):\n",
        "    for j in range(len(Ans_clinical[i])):\n",
        "      if Ans_clinical[i][j] == \"Y\":\n",
        "        clinical_trueweight[i][j] = clinical2[i][clinical_Q[i][j]]  #此處做到參照，且clinical_trueweight不需預先設置結構就可成為Nested list !!!\n",
        "      else:\n",
        "        clinical_trueweight[i][j] = 0          \n",
        "  #處理immunological domains的weights\n",
        "  for i in range(len(Ans_immunological)):\n",
        "    for j in range(len(Ans_immunological[i])):\n",
        "      if Ans_immunological[i][j] == \"Y\":\n",
        "        immunological_trueweight[i][j] = immunological2[i][immunological_Q[i][j]]   #此處做到參照\n",
        "      else:\n",
        "        immunological_trueweight[i][j] = 0\n",
        "  clinical_trueweight2 = [] \n",
        "  immunological_trueweight2 = []\n",
        "  for weight_list in clinical_trueweight:\n",
        "    clinical_trueweight2.append(max(weight_list)) \n",
        "  for weight_list in immunological_trueweight:\n",
        "    immunological_trueweight2.append(max(weight_list))\n",
        "  clinical_total_score = sum(clinical_trueweight2)\n",
        "  immunological_total_score = sum(immunological_trueweight2)\n",
        "  total_score = clinical_total_score + immunological_total_score\n",
        "  # 找到weight最高的domain(想想如何呈現前三高)\n",
        "  highest_clinical = max(clinical_trueweight2)\n",
        "  highest_immunological = max(immunological_trueweight2)\n",
        "  highest = highest_clinical if highest_clinical > highest_immunological else highest_immunological\n",
        "  main_clinical_cause = []\n",
        "  main_immunological_cause = []\n",
        "  for i in range(len(clinical_trueweight2)):\n",
        "    if clinical_trueweight2[i] == highest:\n",
        "      main_clinical_cause.append(f'{clinical[i]} domain')\n",
        "  for j in range(len(immunological_trueweight2)):\n",
        "    if immunological_trueweight2[j] == highest:\n",
        "      main_immunological_cause.append(f'{immunological[j]} domain') \n",
        "  main_clinical_cause = tuple(main_clinical_cause)     \n",
        "  main_immunological_cause = tuple(main_immunological_cause)\n",
        "  print(SLE(total_score))\n",
        "else:\n",
        "  print('\\nDiagnostic result:')\n",
        "  print('This patient is not classified as SLE!')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kwY-Mf4Xhlei",
        "outputId": "895449e7-cb54-479f-d409-939cd413558d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Welcome to SLE diagnosis assistant!\n",
            "Here comes entry criteron.\n",
            "ANA at a titer of 1:\"?\" on HEp-2 cells.(Please input a number of type\"float\".)5..\n",
            "You got a ValueError.\n",
            "ANA at a titer of 1:\"?\" on HEp-2 cells.(Please input a number of type\"float\".)T\n",
            "You got a ValueError.\n",
            "ANA at a titer of 1:\"?\" on HEp-2 cells.(Please input a number of type\"float\".)-0.3\n",
            "You should input a positive number!\n",
            "ANA at a titer of 1:\"?\" on HEp-2 cells.(Please input a number of type\"float\".)80\n",
            "Additive criteria are needed before final diagnosis.\n",
            "The following are some important conditions in clinical or immunological domains.\n",
            "   Please input \"Y\" if a patient meets the condition while input \"N\" if one doesn't.\n",
            "First, we need to know the patient's clinical conditions through the following questionaire.\n",
            "1. Questions about Constitutional domain:\n",
            "Fever ?\n",
            "Please input \"Y\" or \"N\".R\n",
            "You just filled in a wrong key word(not \"Y\" or \"N\"), please be more careful and try again!\n",
            "Fever ?\n",
            "Please input \"Y\" or \"N\".Y\n",
            "2. Questions about Hematologic domain:\n",
            "Leukopenia ?\n",
            "Please input \"Y\" or \"N\".N\n",
            "Thrombocytopenia ?\n",
            "Please input \"Y\" or \"N\".N\n",
            "Autoimmune hemolysis ?\n",
            "Please input \"Y\" or \"N\".Y\n",
            "3. Questions about Neuropsychiatric domain:\n",
            "Delirium ?\n",
            "Please input \"Y\" or \"N\".N\n",
            "Psychosis ?\n",
            "Please input \"Y\" or \"N\".Y\n",
            "Siezure ?\n",
            "Please input \"Y\" or \"N\".N\n",
            "4. Questions about Mucocutaneous domain:\n",
            "Non-scarring alopecia ?\n",
            "Please input \"Y\" or \"N\".N\n",
            "Oral ulcers ?\n",
            "Please input \"Y\" or \"N\".N\n",
            "Subacute cutaneous OR discoid lupus ?\n",
            "Please input \"Y\" or \"N\".Y\n",
            "Acute cutaneous lupus ?\n",
            "Please input \"Y\" or \"N\".N\n",
            "5. Questions about Serosal domain:\n",
            "Pleural or pericardial effusion ?\n",
            "Please input \"Y\" or \"N\".N\n",
            "Acute pericarditis ?\n",
            "Please input \"Y\" or \"N\".N\n",
            "6. Questions about Musculoskeletal domain:\n",
            "Joint involvment ?\n",
            "Please input \"Y\" or \"N\".Y\n",
            "7. Questions about Renal domain:\n",
            "Proteinuria > 0.5g/24h ?\n",
            "Please input \"Y\" or \"N\".N\n",
            "Renal biopsy Class II or V lupus nephritis ?\n",
            "Please input \"Y\" or \"N\".N\n",
            "Renal biopsy Class III or IV lupus nephritis ?\n",
            "Please input \"Y\" or \"N\".N\n",
            "Ans_clinical:  [['Y'], ['N', 'N', 'Y'], ['N', 'Y', 'N'], ['N', 'N', 'Y', 'N'], ['N', 'N'], ['Y'], ['N', 'N', 'N']]\n",
            "Then, we would like to further understand the patient's immunological conditions through the following questionaire.\n",
            "1. Questions about Antiphospholipid_antibodies domain:\n",
            "Anti-cardiolipin antibodies OR Anti-β2GP1 antibodes OR Lupus anticoagulant ?\n",
            "Please input \"Y\" or \"N\".N\n",
            "2. Questions about Complement_proteins domain:\n",
            "Low C3 OR low C4 ?\n",
            "Please input \"Y\" or \"N\".Y\n",
            "Low C3 AND low C4 ?\n",
            "Please input \"Y\" or \"N\".N\n",
            "3. Questions about SLE_specific_antibodies domain:\n",
            "Anti-dsDNA antibody OR Anti-Smith antibody ?\n",
            "Please input \"Y\" or \"N\".N\n",
            "Ans_immunological:  [['N'], ['Y', 'N'], ['N']]\n",
            "clinical_trueweight:  [[2], [0, 0, 4], [0, 3, 0], [0, 0, 4, 0], [0, 0], [6], [0, 0, 0]]\n",
            "immunological_trueweight:  [[0], [3, 0], [0]]\n",
            "clinical_trueweight2:  [2, 4, 3, 4, 0, 6, 0]\n",
            "immunological_trueweight2:  [0, 3, 0]\n",
            "main_clinical_cause: ('Musculoskeletal domain',)\n",
            "main_immunological_cause: ()\n",
            "clinical_total_score: 19\n",
            "immunological_total_score:  3\n",
            "total_score:  22\n",
            "\n",
            "Diagnostic result:\n",
            "  Yes. This patient is classified as SLE.\n",
            "  Main causes: (1)clinical: ('Musculoskeletal domain',) ； (2)immunology: ()\n",
            "  Each gets 6 pts of total 22 pts and accounts for 27.27 % of total weights.\n"
          ]
        }
      ]
    }
  ]
}
